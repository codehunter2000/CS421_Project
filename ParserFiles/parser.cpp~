#include<iostream>
#include<fstream>
#include<string>
#include<cctype>
#include<cstdlib>

using namespace std;

// INSTRUCTION:  Complete all ** parts.
// You may use any method to connect this file to scanner.cpp
// that you had written.  
// You can copy scanner.cpp here by cp ../ScannerFiles/scanner.cpp .
// -----------------------------------------------------

//=================================================
// File parser.cpp written by Group Number: **4
//=================================================

// ----- Utility and Globals -----------------------------------

// ** Need syntaxerror1 and syntaxerror2 functions (each takes 2 args)
// ** Be sure to put the name of the programmer above each function
// i.e. Done by:

// ** Need the updated match and next_token (with 2 global vars)
// ** Be sure to put the name of the programmer above each function
// i.e. Done by:


// ----- RDP functions - one per non-term -------------------

// ** Make each non-terminal into a function here
// ** Be sure to put the corresponding grammar rule above each function
// i.e. Grammar: 
// ** Be sure to put the name of the programmer above each function
// i.e. Done by:


//---------------------------------------

// The new test driver to start the parser
// Done by:  **

// Update the tokentype to be WORD1, WORD2, PERIOD, ERROR, etc.
//these are the token types
enum tokentype {ERROR, WORD1, WORD2, PERIOD, VERB, VERBNEG, VERBPAST, VERBPASTNEG,
                IS, WAS, OBJECT, SUBJECT, DESTINATION, PRONOUN, CONNECTOR, EOFM};

//these are the token names
//string tokenName[30] = { }; for the display names of tokens
string tokenName[16] = { "ERROR", "WORD1", "WORD2", "PERIOD", "VERB", "VERBNEG", "VERBPAST", "VERBPASTNEG",
                         "IS", "WAS", "OBJECT", "SUBJECT", "DESTINATION", "PRONOUN", "CONNECTOR", "EOFM"};

//limit of amt of reserved words
const int amtOfWords = 19;

//setting up tble with reserved words and amt of words
string reservedwords[amtOfWords] =
  {  "masu", "masen", "mashita", "masendeshita", "desu", "deshita", "o", "wa", "ni",
     "watashi", "anata", "kare", "konojo", "sore", "mata", "soshite", "shikashi", "dakara", "eofm" };

string wordType[amtOfWords] =
  {  "VERB", "VERBNEG", "VERBPAST", "VERBPASTNEG", "IS", "WAS", "OBJECT", "SUBJECT", "DESTINATION",
     "PRONOUN", "PRONOUN", "PRONOUN", "PRONOUN", "PRONOUN", "CONNECTOR", "CONNECTOR", "CONNECTOR",
     "CONNECTOR", "EOFM" };

ifstream fin;  //fin for file

void story();
void sentence();
void afterSubject();
void afterNoun();
void afterObject();
void noun();
void verb();
void be();
void tense();

void syntax_error1(tokentype);
void syntax_error2(string);

tokentype next_token();
bool match(tokentype);

tokentype saved_token;
string saved_lexeme;
string filename;
bool tokenExists = false; //no starting token

void scanner(tokentype&, string&);

int main()
{

  cout << "Enter the input file name: ";
  cin >> filename;
  fin.open(filename.c_str());

  story();

  //** calls the <story> to start parsing
  //** closes the input file 
  fin.close();
}// end
//** require no other input files!
//** syntax error EC requires producing errors.text of messages




//-----------------------PARSER FUNCTIONS--------------------------
//Done by: Andrew Hawn
//<story> -> <sentence> { <sentence> }
void story()
{
  cout << "Processing <story>" << endl;
  cout << endl;

  connector_noun_subject();
  while(next_token() != EOFM)
    {
      sentence();
    }
}
//Done by: Andrew Hawn
//<sentence> -> [CONNECTOR] <noun> SUBJECT <afterSubject>
void sentence()
{
  cout << "Processing <sentence>" << endl;

  if(next_token() == CONNECTOR)
    {
      match(CONNECTOR);
    }

  switch(next_token())
    {
    case WORD1: case PRONOUN:
      noun();
      match(SUBJECT);
      afterSubject();
      break;
    default:
      syntax_error2("<sentence>");
      return;
    }
}
//Done by: Andrew Hawn
//<afterSubject> -> <verb> <tense> PERIOD | <noun> <afterNoun>
void afterSubject()
{
  cout << "Processing <afterSubject>" << endl;

  switch(next_token())
    {
    case WORD2:
      verb();
      tense();
      match(PERIOD);
      break;
    case WORD1: case PRONOUN:
      noun();
      afterNoun();
      break;
    default:
      syntax_error2("<afterSubject>");
      return;
    }
}
//Done by: Andrew Hawn
//<afterNoun> -> <be> PERIOD | DESTINATION <verb> <tense> PERIOD | OBJECT <afterObject>
void afterNoun()
{
  cout << "Processing <afterNoun>" << endl;

  switch(next_token())
    {
    case IS: case WAS:
      be();
      match(PERIOD);
      break;
    case DESTINATION:
      match(DESTINATION);
      verb();
      tense();
      match(PERIOD);
      break;
    case OBJECT:
      match(OBJECT);
      afterObject();
      break;
    default:
      syntax_error2("<afterNoun>");
      return;
    }
}
//Done by: Andrew Hawn
//<afterObject> -> <verb> <tense> PERIOD | <noun> DESTINATION <verb> <tense> PERIOD
void afterObject()
{
  cout << "Processing <afterObject>" << endl;

  switch(next_token())
    {
    case WORD2:
      verb();
      tense();
      match(PERIOD);
      break;
    case WORD1: case PRONOUN:
      noun();
      match(DESTINATION);
      verb();
      tense();
      match(PERIOD);
      break;
    default:
      syntax_error2("<afterObject>");
      return;
    }
}
//Done by: Andrew Hawn
//<noun> -> WORD1 | PRONOUN
void noun()
{
  cout << "Processing <noun>" << endl;

  switch(next_token())
    {
    case WORD1:
      match(WORD1);
      break;
    case PRONOUN:
      match(PRONOUN);
      break;
    default:
      syntax_error2("<noun>");
      return;
    }
}
//Done by: Andrew Hawn
//<verb> -> WORD2
void verb()
{
  cout << "Processing <verb>" << endl;

  switch(next_token())
    {
    case WORD2:
      match(WORD2);
      break;
    default:
      syntax_error2("<verb>");
      return;
    }
}
//Done by: Andrew Hawn
//<be> -> IS | WAS
void be()
{
  cout << "Processing <be>" << endl;

  switch(next_token())
    {
    case IS:
      match(IS);
      break;
    case WAS:
      match(WAS);
      break;
    default:
      syntax_error2("<be>");
      return;
    }
}
//Done by: Andrew Hawn
//<tense> -> VERBPAST | VERBPASTNEG | VERB | VERBNEG
void tense()
{
  cout << "Processing <tense>" << endl;

  switch(next_token())
    {
    case VERBPAST:
      match(VERBPAST);
      break;
    case VERBPASTNEG:
      match(VERBPASTNEG);
      break;
    case VERB:
      match(VERB);
      break;
    case VERBNEG:
      match(VERBNEG);
      break;
    default:
      syntax_error2("<tense>");
      return;
    }
}
//Done by:
bool match(tokentype thetype)
{
  if(next_token() != thetype)
    {
      syntax_error1(thetype);
    }
  else
    {
      cout << "Matched " << tokenName[thetype] << endl;
      tokenExists = false;
      return true;
    }
}
//Done by:
tokentype next_token()
{
  if(tokenExists == false)
    {
      scanner(saved_token, saved_lexeme);
      tokenExists = true;
    }
  return saved_token;
}
//Done by:
void syntax_error1(tokentype thetype)
{
  cout << "SYNTAX ERROR: expected " << tokenName[thetype] << " but found " << saved_lexeme << "." << endl;
  exit(1);
}
//Done by:
void syntax_error2(string parserFunction)
{
  cout << "SYNTAX ERROR: unexpected " << saved_lexeme << " found in " << parserFunction << "." << endl;
  exit(1);
}
//-----------------------SCANNER FUNCTIONS----------------------------

bool word(string s)
{
  int state = 0; //declarations
  int charpos = 0;
  
  while (s[charpos] != '\0') //charpos of letters
    {
      if(state == 0 && (s[charpos] == 'b' ||s[charpos] == 'g' || s[charpos] == 'h' || s[charpos] == 'k' || s[charpos] == 'm' || s[charpos] == 'n' || s[charpos] == 'r'))
	state = 1;
      else 
	if (state == 0 && (s[charpos] == 'a' || s[charpos] == 'e' ||s[charpos] == 'i' || s[charpos] == 'o' || s[charpos] == 'u' || s[charpos] == 'I' || s[charpos] == 'E')) 
	  state = 2;    
	else 
	  if (state == 0 && (s[charpos] == 'd' || s[charpos] == 'j' || s[charpos] == 'w' || s[charpos] == 'y' || s[charpos] == 'z'))
	    state = 3;   
	  else 
	    if (state == 0 && s[charpos] == 's')
	      state = 4; 
	    else 
	      if (state == 0 && s[charpos] == 'c')
		state = 5;
	      else 
		if (state == 0 && s[charpos] == 't')
		  state = 6;
		else 
		  if (state == 1 && (s[charpos] == 'a' || s[charpos] == 'e' ||s[charpos] == 'i' || s[charpos] == 'o' || s[charpos] == 'u' || s[charpos] == 'I' || s[charpos] == 'E'))   
		    state = 2;
		  else 
		    if (state == 1 && s[charpos] == 'y')
		      state = 3;
		    else 
		      if (state == 2 && s[charpos] == 'n')
			state = 0;
		      else 
			if (state == 2 && (s[charpos] == 'b' ||s[charpos] == 'g' || s[charpos] == 'h' || s[charpos] == 'k' || s[charpos] == 'm' || s[charpos] == 'n' || s[charpos] == 'r'))
			  state = 1;
			else 
			  if (state == 2 && (s[charpos] == 'a' || s[charpos] == 'e' ||s[charpos] == 'i' || s[charpos] == 'o' || s[charpos] == 'u' || s[charpos] == 'I' || s[charpos] == 'E'))   
			    state = 2;
			  else 
			    if (state == 2 && (s[charpos] == 'd' || s[charpos] == 'j' || s[charpos] == 'w' || s[charpos] == 'y' || s[charpos] == 'z'))
			      state = 3;
			    else 
			      if (state == 2 && s[charpos] == 's')
				state = 4;
			      else 
				if (state == 2 && s[charpos] == 'c')
				  state = 5;
				else 
				  if (state == 2 && s[charpos] == 't')
				    state = 6;
				  else 
				    if (state == 3 && (s[charpos] == 'a' || s[charpos] == 'e' ||s[charpos] == 'i' || s[charpos] == 'o' || s[charpos] == 'u' || s[charpos] == 'I' || s[charpos] == 'E'))
				      state = 2;
				    else 
				      if (state == 4 && (s[charpos] == 'a' || s[charpos] == 'e' ||s[charpos] == 'i' || s[charpos] == 'o' || s[charpos] == 'u' || s[charpos] == 'I' || s[charpos] == 'E'))
					state = 2;
				      else 
					if (state == 4 && s[charpos] == 'h')
					  state = 3;
					else 
					  if (state == 5 && s[charpos] == 'h')
					    state = 3;
					  else 
					    if (state == 6 && (s[charpos] == 'a' || s[charpos] == 'e' ||s[charpos] == 'i' || s[charpos] == 'o' || s[charpos] == 'u' || s[charpos] == 'I' || s[charpos] == 'E'))
					      state = 2;
					    else
					      if (state == 6 && s[charpos] == 's')
						state = 3;
					      else
						return(false);

      charpos++;
    }//end of while

  // where did I end up????
  if (state == 2 || state == 0) return(true);  //the final state is where one ends up
  else return(false);  //if not returb false
}

//======================================================================================================
//Add the PERIOD DFA here
//RE: implemented with while and if/else
bool period(string s)
{
  int state = 0;
  int charpos = 0;

  while (s[charpos] != '\0') //implement the period dfa
    {
      if(state == 0 && s[charpos] == '.')
	state = 1;
      else 
	return (false);

      charpos++;
    }

  if(state == 1) return (true);
  else return(false);
}

//======================================================================================================

//matching the reserved words and returning its type 
void matchReserved(tokentype &a, string w)
{
  for(int i = 0; i<amtOfWords; i++)
  {
    if(w == reservedwords[i])
    {
      string type = wordType[i];
      for(int x = 0; x<16; x++)
      {
        if(wordType[i] == tokenName[x])
        {
          a = static_cast<tokentype>(x); //static cast x
          return;
        }
      }
      return;
    }
  }
  return;
}

//======================================================================================================

// Scanner processes only one word each time it is called
//gives back token and word itself
void scanner(tokentype& a, string& w)
{
    
    //fin declared above now reading in
    fin >> w;
    cout << "Scanner called using word: " << w << endl;
    bool result = true;

    /*Calling the token functions one after another (if-then-else)
     And generate a lexical error message if both DFAs failed.
     Let the token_type be ERROR in that case.*/

    if(w == "eofm")
    {
        //exit if reach need be
        exit(0);
    }
    else
    {
        result = period(w);
        if(result) //if result is true
        {
            a = PERIOD;
            return;
        }
        else
        {
            result = word(w);
            if(!result)
            {
                a = ERROR;
                cout << "Lexical error: " << w << " is not a valid token" << endl;
            }
            else
            {
                bool test = isupper(w[w.size()-1]);
                if(test)
                {
                    a = WORD2;
                }
                else
                {
                    /*Making sure WORDs are checked against the reservedwords list
                     If not reserved, token_type is WORD1 or WORD2.*/
                    a = WORD1;
                    matchReserved(a, w);
                }
            }
        }
    }
    
}
